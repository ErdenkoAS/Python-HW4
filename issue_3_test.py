# -*- coding: utf-8 -*-
"""issue_3_test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r3H-BU3pbVkGMRjGC0PfH5C4RV7kPAFW
"""

from one_hot_encoder import fit_transform
import unittest


class TestFitTransform(unittest.TestCase):
    #тут пропишем 4 тестовых группы

    def test_catch_exception(self):
      '''
      как следует из названия - проверка исключений
      пусть будет число
      '''
        n = 111
        try:
            fit_transform(n)
        except TypeError:
            self.assertRaises(TypeError)

    def test_dota2_spirits(self):
      '''
      следующие две функции по сути одинаковые, но пропишем, так как просили >= 4 примера)))
      для assertEqual
      '''
        spirits = ['Void', 'Ember', 'Storm', 'Earth']
        actual = fit_transform(spirits)
        expected = [('Void', [0, 0, 0, 1]),
                    ('Ember', [0, 0, 1, 0]),
                    ('Storm', [0, 1, 0, 0]),
                    ('Earth', [1, 0, 0, 0])]
        self.assertEqual(actual, expected)

    def avito_courses(self):
        courses = ['python', 'sql', 'stats']
        actual = fit_transform(courses)
        expected = [('python', [0, 0, 1]),
                    ('sql', [0, 1, 0]),
                    ('stats', [1, 0, 0])]
        self.assertEqual(actual, expected)

    def test_students(self):
      '''
      теперь пропишем для assertNotIn
      пусть для симметрии тоже 2 примера
      '''
        students = ['Alex']
        actual = fit_transform(students)
        workers = [('Alex', [0, 0, 1]),
                     ('Ilya', [0, 1, 0]),
                     ('Max', [1, 0, 0])]
        self.assertNotIn(actual, workers)

    def test_games(self):
        pc_games = ['Minecraft']
        actual = fit_transform(pc_games)
        console_games = [('Minecraft', [0, 0, 1]),
                     ('Terraria', [0, 1, 0]),
                     ('Battlefield', [1, 0, 0])]
        self.assertNotIn(actual, console_games)